scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		
        
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	
        	setDateRange(lastDays: number): void {
        		const currentDate = new Date();
        		const pastDate = new Date();
        		pastDate.setDate(currentDate.getDate() - lastDays);
        		
        		// Format dates as string in the ''YYYY-MM-DD'' format
        		const currentYear = currentDate.getFullYear().toString();
        		const currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, ''0''); 
        		const currentDay = currentDate.getDate().toString().padStart(2, ''0'');
        		
        		const pastYear = pastDate.getFullYear().toString();
        		const pastMonth = (pastDate.getMonth() + 1).toString().padStart(2, ''0''); 
        		const pastDay = pastDate.getDate().toString().padStart(2, ''0'');
        		
        		this.dateEnd = `${currentYear}-${currentMonth}-${currentDay}`;
        		this.dateStart = `${pastYear}-${pastMonth}-${pastDay}`;
        		
        		// Emit the new date values to inform parent components of the update
        		this.dateStartChange.emit(this.dateStart);
        		this.dateEndChange.emit(this.dateEnd);
        		
        	}
        	
        	/*End_c8o_CompFunction*/
        '
↓CardContainer [ngx.components.UIDynamicElement-1701369309100]: 
  beanData: '{"ionBean":"Card"}'
  tagName: ion-card
  ↓CardHeader [ngx.components.UIDynamicElement-1701369309103]: 
    beanData: '{"ionBean":"CardHeader"}'
    tagName: ion-card-header
    ↓CardTitle [ngx.components.UIDynamicElement-1701369309106]: 
      beanData: '{"ionBean":"CardTitle"}'
      tagName: ion-card-title
      ↓tag [ngx.components.UIControlDirective-1705930166446]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: source:{"filter":"Sequence","project":"C8OBilling","input":"","model":{"data":[{"sequence":"C8OBilling.GetBillingCustomers","marker":""}],"path":"?.isAdmin","prefix":"","suffix":"","custom":"","useCustom":false}}
        ↓TextItem [ngx.components.UIDynamicElement-1701369309109]: 
          beanData: '{"ionBean":"TextItem"}'
          tagName: ion-text
          ↓some_text [ngx.components.UIText-1701369309112]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Select range of dates and customer
      ↓tag1 [ngx.components.UIControlDirective-1705930355096]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: source:{"filter":"Sequence","project":"C8OBilling","input":"","model":{"data":[{"sequence":"C8OBilling.GetBillingCustomers","marker":""}],"path":"?.isAdmin","prefix":"!","suffix":"","custom":"","useCustom":false}}
        ↓TextItem [ngx.components.UIDynamicElement-1705930355099]: 
          beanData: '{"ionBean":"TextItem"}'
          tagName: ion-text
          ↓some_text [ngx.components.UIText-1705930355102]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'plain:Select range of dates for Site : '
          ↓some_text1 [ngx.components.UIText-1705930388682]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: source:{"filter":"Sequence","project":"C8OBilling","input":"","model":{"data":[{"sequence":"C8OBilling.GetBillingCustomers","marker":""}],"path":"?.customerName","prefix":"","suffix":"?.[0]","custom":"","useCustom":false}}
    ↓Style [ngx.components.UIStyle-1708352130114]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              	
              
  ↓CardContent [ngx.components.UIDynamicElement-1701369309115]: 
    beanData: '{"ionBean":"CardContent"}'
    tagName: ion-card-content
    ↓Grid [ngx.components.UIDynamicElement-1701369309118]: 
      beanData: '{"ionBean":"Grid"}'
      tagName: ion-grid
      ↓GridRow [ngx.components.UIDynamicElement-1701369309121]: 
        beanData: '{"ionBean":"GridRow"}'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1701369309124]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
          ↓Modal [ngx.components.UIDynamicElement-1701369309130]: 
            beanData: '{"ionBean":"InlineModal","Trigger":"plain:start"}'
            tagName: ion-modal
            ↓Grid [ngx.components.UIDynamicElement-1701369309133]: 
              beanData: '{"ionBean":"Grid"}'
              tagName: ion-grid
              ↓GridRow2 [ngx.components.UIDynamicElement-1701369309136]: 
                beanData: '{"ionBean":"GridRow","Height":"plain:10%"}'
                tagName: ion-row
              ↓GridRow [ngx.components.UIDynamicElement-1701369309139]: 
                beanData: '{"ionBean":"GridRow","Height":"plain:80%"}'
                tagName: ion-row
                ↓GridCol [ngx.components.UIDynamicElement-1701369309142]: 
                  beanData: '{"ionBean":"GridCol"}'
                  tagName: ion-col
                ↓GridCol1 [ngx.components.UIDynamicElement-1701369309145]: 
                  beanData: '{"ionBean":"GridCol"}'
                  tagName: ion-col
                  ↓DateTime [ngx.components.UIDynamicElement-1701369309148]: 
                    beanData: |
                      '{
                       "ionBean": "DateTime",
                       "ControlName": "plain:name1695137115833",
                       "DoubleBinding": "source:{\"filter\":\"Shared\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1701369309078,\"regular\":true}],\"path\":\"?.dateStart\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                       "DoneText": "plain:Done",
                       "Locale": "plain:fr-FR",
                       "Presentation": "plain:date",
                       "ShowDefaultButtons": "plain:true",
                       "Size": "plain:cover"
                      }'
                    tagName: ion-datetime
                ↓GridCol2 [ngx.components.UIDynamicElement-1701369309151]: 
                  beanData: '{"ionBean":"GridCol"}'
                  tagName: ion-col
              ↓GridRow1 [ngx.components.UIDynamicElement-1701369309154]: 
                beanData: '{"ionBean":"GridRow","Height":"plain:10%"}'
                tagName: ion-row
            ↓Style [ngx.components.UIStyle-1701369309157]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '/**
                       * Custom properties (sometimes referred to as CSS variables or cascading variables)
                       * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                       * They are set using custom property notation, e.g.: --main-color: black;
                       * and are accessed using the var() function, e.g.: color: var(--main-color);
                       * You can find below your component''s properties you can customize within the page.
                       * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                       * For more informations see https://ionicframework.com/docs/theming.
                      **/
                      //--backdrop-opacity	//Opacity of the backdrop
                      //--background	//Background of the modal content
                      //--border-color	//Border color of the modal content
                      //--border-radius	//Border radius of the modal content
                      //--border-style	//Border style of the modal content
                      //--border-width	//Border width of the modal content
                      //--height	//Height of the modal
                      //--max-height	//Maximum height of the modal
                      //--max-width	//Maximum width of the modal
                      //--min-height	//Minimum height of the modal
                      //--min-width	//Minimum width of the modal
                      //--width	//Width of the modal
                      	color: grey
                      '
          ↓GenericItem [ngx.components.UIDynamicElement-1701369309160]: 
            beanData: '{"ionBean":"GenericItem"}'
            tagName: ion-item
            ↓TextInput [ngx.components.UIDynamicElement-1701369309163]: 
              beanData: |
                '{
                 "ionBean": "Input",
                 "ControlName": "plain:DateStart",
                 "DoubleBinding": "source:{\"filter\":\"Shared\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1701369309078,\"regular\":true}],\"path\":\"?.dateStart\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                 "Debounce": "plain:0",
                 "Type": "plain:date"
                }'
              tagName: ion-input
            ↓Icon [ngx.components.UIDynamicElement-1701369309166]: 
              beanData: |
                '{
                 "ionBean": "Icon",
                 "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''calendar-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                 "IconSlot": "plain:end"
                }'
              tagName: ion-icon
              ↓id [ngx.components.UIAttribute-1701369309169]: 
                attrName: id
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:start
        ↓GridCol1 [ngx.components.UIDynamicElement-1701369309172]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
          ↓Modal [ngx.components.UIDynamicElement-1701369309178]: 
            beanData: '{"ionBean":"InlineModal","Trigger":"plain:end"}'
            tagName: ion-modal
            ↓Grid [ngx.components.UIDynamicElement-1701369309181]: 
              beanData: '{"ionBean":"Grid"}'
              tagName: ion-grid
              ↓GridRow2 [ngx.components.UIDynamicElement-1701369309184]: 
                beanData: '{"ionBean":"GridRow","Height":"plain:10%"}'
                tagName: ion-row
              ↓GridRow [ngx.components.UIDynamicElement-1701369309187]: 
                beanData: '{"ionBean":"GridRow","Height":"plain:80%"}'
                tagName: ion-row
                ↓GridCol [ngx.components.UIDynamicElement-1701369309190]: 
                  beanData: '{"ionBean":"GridCol"}'
                  tagName: ion-col
                ↓GridCol1 [ngx.components.UIDynamicElement-1701369309193]: 
                  beanData: '{"ionBean":"GridCol"}'
                  tagName: ion-col
                  ↓DateTime [ngx.components.UIDynamicElement-1701369309196]: 
                    beanData: |
                      '{
                       "ionBean": "DateTime",
                       "ControlName": "plain:name1695137115833",
                       "DoubleBinding": "source:{\"filter\":\"Shared\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1701369309078,\"regular\":true}],\"path\":\"?.dateEnd\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                       "DoneText": "plain:Done",
                       "Locale": "plain:fr-FR",
                       "Presentation": "plain:date",
                       "ShowDefaultButtons": "plain:true",
                       "Size": "plain:cover"
                      }'
                    tagName: ion-datetime
                ↓GridCol2 [ngx.components.UIDynamicElement-1701369309199]: 
                  beanData: '{"ionBean":"GridCol"}'
                  tagName: ion-col
              ↓GridRow1 [ngx.components.UIDynamicElement-1701369309202]: 
                beanData: '{"ionBean":"GridRow","Height":"plain:10%"}'
                tagName: ion-row
            ↓Style [ngx.components.UIStyle-1701369309205]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '/**
                       * Custom properties (sometimes referred to as CSS variables or cascading variables)
                       * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                       * They are set using custom property notation, e.g.: --main-color: black;
                       * and are accessed using the var() function, e.g.: color: var(--main-color);
                       * You can find below your component''s properties you can customize within the page.
                       * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                       * For more informations see https://ionicframework.com/docs/theming.
                      **/
                      //--backdrop-opacity	//Opacity of the backdrop
                      //--background	//Background of the modal content
                      //--border-color	//Border color of the modal content
                      //--border-radius	//Border radius of the modal content
                      //--border-style	//Border style of the modal content
                      //--border-width	//Border width of the modal content
                      //--height	//Height of the modal
                      //--max-height	//Maximum height of the modal
                      //--max-width	//Maximum width of the modal
                      //--min-height	//Minimum height of the modal
                      //--min-width	//Minimum width of the modal
                      //--width	//Width of the modal
                      	color: grey
                      '
          ↓GenericItem [ngx.components.UIDynamicElement-1701369309208]: 
            beanData: '{"ionBean":"GenericItem"}'
            tagName: ion-item
            ↓TextInput [ngx.components.UIDynamicElement-1701369309211]: 
              beanData: |
                '{
                 "ionBean": "Input",
                 "ControlName": "plain:DateStart",
                 "DoubleBinding": "source:{\"filter\":\"Shared\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1701369309078,\"regular\":true}],\"path\":\"?.dateEnd\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                 "Debounce": "plain:0",
                 "Type": "plain:date"
                }'
              tagName: ion-input
            ↓Icon [ngx.components.UIDynamicElement-1701369309214]: 
              beanData: |
                '{
                 "ionBean": "Icon",
                 "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''calendar-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                 "IconSlot": "plain:end"
                }'
              tagName: ion-icon
              ↓id [ngx.components.UIAttribute-1701369309217]: 
                attrName: id
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:end
        ↓tag [ngx.components.UIControlDirective-1705930458103]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: source:{"filter":"Sequence","project":"C8OBilling","input":"","model":{"data":[{"sequence":"C8OBilling.GetBillingCustomers","marker":""}],"path":"?.isAdmin","prefix":"","suffix":"","custom":"","useCustom":false}}
          ↓GridCol2 [ngx.components.UIDynamicElement-1701427547965]: 
            beanData: '{"ionBean":"GridCol"}'
            tagName: ion-col
            ↓GenericItem [ngx.components.UIDynamicElement-1701427547998]: 
              beanData: '{"ionBean":"GenericItem"}'
              tagName: ion-item
              ↓SelectContainer [ngx.components.UIDynamicElement-1701427576330]: 
                beanData: |
                  '{
                   "ionBean": "Select",
                   "ControlName": "plain:name1701427576330",
                   "DoubleBinding": "source:{\"filter\":\"Shared\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1701369309078,\"regular\":true}],\"path\":\"?.customerName\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                   "Interface": "plain:alert",
                   "Placeholder": "plain:Customer Name"
                  }'
                tagName: ion-select
                ↓tag [ngx.components.UIControlDirective-1701427623232]: 
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: source:{"filter":"Sequence","project":"C8OBilling","input":"","model":{"data":[{"sequence":"C8OBilling.GetBillingCustomers","marker":""}],"path":"?.customerName","prefix":"","suffix":"","custom":"","useCustom":false}}
                  ↓SelectOption [ngx.components.UIDynamicElement-1701427603929]: 
                    beanData: '{"ionBean":"SelectOption","Value":"source:{\"filter\":\"Iteration\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"priority\":1701427623232}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}"}'
                    tagName: ion-select-option
                    ↓some_text [ngx.components.UIText-1701427685352]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: source:{"filter":"Iteration","project":"C8OBilling","input":"","model":{"data":[{"priority":1701427623232}],"path":"","prefix":"","suffix":"","custom":"","useCustom":false}}
                ↓attr [ngx.components.UIControlEvent-1705425228342]: 
                  attrName: (ionChange)
                  eventName: ionChange
                  ↓CallSequence [ngx.components.UIDynamicAction-1705425252524]: 
                    beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:C8OBilling.SetCustomer"}'
                    tagName: CallSequence
                    ↓customerName [ngx.components.UIControlVariable-1705425265190]: 
                      comment: new variable
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: source:{"filter":"Shared","project":"C8OBilling","input":"","model":{"data":[{"priority":1701369309078,"regular":true}],"path":"?.customerName","prefix":"","suffix":"","custom":"","useCustom":false}}
                    ↓EmitValue [ngx.components.UIDynamicEmit-1705674128032]: 
                      beanData: '{"ionBean":"EmitValueAction","compvar":"plain:C8OBilling.Application.NgxApp.DateselectionPanel.customerName"}'
                      tagName: EmitValue
              ↓Icon [ngx.components.UIDynamicElement-1701427548004]: 
                beanData: |
                  '{
                   "ionBean": "Icon",
                   "IconName": "source:{\"filter\":\"Icon\",\"project\":\"C8OBilling\",\"input\":\"\",\"model\":{\"data\":[{\"icon\":\"''home-outline''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
                   "IconSlot": "plain:end"
                  }'
                tagName: ion-icon
                ↓id [ngx.components.UIAttribute-1701427548007]: 
                  attrName: id
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:end
      ↓GridRow1 [ngx.components.UIDynamicElement-1707133663787]: 
        beanData: '{"ionBean":"GridRow"}'
        tagName: ion-row
        ↓GridCol [ngx.components.UIDynamicElement-1707133663776]: 
          beanData: '{"ionBean":"GridCol"}'
          tagName: ion-col
          ↓RadioGroup [ngx.components.UIDynamicElement-1707134565793]: 
            beanData: |
              '{
               "ionBean": "RadioGroup",
               "ControlName": "plain:name1707134565793",
               "Value": "plain"
              }'
            tagName: ion-radio-group
            ↓TextItem [ngx.components.UIDynamicElement-1707139506272]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓RadioButton [ngx.components.UIDynamicElement-1707134422922]: 
                beanData: '{"ionBean":"RadioButton","Value":"plain:date1"}'
                tagName: ion-radio
                ↓Style [ngx.components.UIStyle-1707140516671]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	
                          	padding-top: 10px
                          	/**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--border-radius	//Border radius of the radio
                          //--color	//Color of the radio
                          //--color-checked	//Color of the checked radio
                          //--inner-border-radius	//Border radius of the inner checked radio
                          '
                ↓attr [ngx.components.UIControlEvent-1707140922486]: 
                  ↓CustomAction [ngx.components.UICustomAction-1707141419001]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                            		// 7 days
                            		page.setDateRange(7);
                            		
                            		resolve();
                            '
              ↓some_text [ngx.components.UIText-1707139506271]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Last 7 days
            ↓TextItem1 [ngx.components.UIDynamicElement-1707139532392]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓RadioButton [ngx.components.UIDynamicElement-1707139532398]: 
                beanData: '{"ionBean":"RadioButton","Value":"plain:date2"}'
                tagName: ion-radio
                ↓Style [ngx.components.UIStyle-1707140757556]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	
                          	padding-top: 10px
                          /**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--border-radius	//Border radius of the radio
                          //--color	//Color of the radio
                          //--color-checked	//Color of the checked radio
                          //--inner-border-radius	//Border radius of the inner checked radio
                          '
                ↓attr [ngx.components.UIControlEvent-1707151999641]: 
                  ↓CustomAction [ngx.components.UICustomAction-1707152011075]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                            		page.setDateRange(28);
                            		resolve();
                            '
              ↓some_text [ngx.components.UIText-1707139532395]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Last 28 days
            ↓TextItem2 [ngx.components.UIDynamicElement-1707139535669]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓RadioButton [ngx.components.UIDynamicElement-1707139535675]: 
                beanData: '{"ionBean":"RadioButton","Value":"plain:date3"}'
                tagName: ion-radio
                ↓Style [ngx.components.UIStyle-1707140768535]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	padding-top: 10px
                          /**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--border-radius	//Border radius of the radio
                          //--color	//Color of the radio
                          //--color-checked	//Color of the checked radio
                          //--inner-border-radius	//Border radius of the inner checked radio
                          '
                ↓attr [ngx.components.UIControlEvent-1707152486585]: 
                  ↓CustomAction [ngx.components.UICustomAction-1707152486588]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                            		page.setDateRange(30);
                            		resolve();
                            '
              ↓some_text [ngx.components.UIText-1707139535672]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Last 30 days
            ↓TextItem3 [ngx.components.UIDynamicElement-1707139602302]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓RadioButton [ngx.components.UIDynamicElement-1707139602308]: 
                beanData: '{"ionBean":"RadioButton","Value":"plain:date4"}'
                tagName: ion-radio
                ↓Style [ngx.components.UIStyle-1707140775335]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	padding-top: 10px
                          /**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--border-radius	//Border radius of the radio
                          //--color	//Color of the radio
                          //--color-checked	//Color of the checked radio
                          //--inner-border-radius	//Border radius of the inner checked radio
                          '
                ↓attr [ngx.components.UIControlEvent-1707152490244]: 
                  ↓CustomAction [ngx.components.UICustomAction-1707152490247]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                            		page.setDateRange(90);
                            		resolve();
                            '
              ↓some_text [ngx.components.UIText-1707139602305]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Last 90 days
            ↓TextItem4 [ngx.components.UIDynamicElement-1707139605896]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓RadioButton [ngx.components.UIDynamicElement-1707139605902]: 
                beanData: '{"ionBean":"RadioButton","Value":"plain:date35"}'
                tagName: ion-radio
                ↓Style [ngx.components.UIStyle-1707140780691]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	padding-top: 10px
                          /**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--border-radius	//Border radius of the radio
                          //--color	//Color of the radio
                          //--color-checked	//Color of the checked radio
                          //--inner-border-radius	//Border radius of the inner checked radio
                          '
                ↓attr [ngx.components.UIControlEvent-1707152493719]: 
                  ↓CustomAction [ngx.components.UICustomAction-1707152493722]: 
                    actionValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '		page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
                            		page.setDateRange(365);
                            		resolve();
                            '
              ↓some_text [ngx.components.UIText-1707139605899]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Last 12 months
          ↓Style [ngx.components.UIStyle-1707139998103]: 
            styleContent: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '	
                    	ion-radio {
                      --border-radius: 4px;
                      --inner-border-radius: 4px;
                    
                      --color: #ddd;
                      --color-checked: royalblue;
                    }
                    
                    ion-radio.ios::part(container) {
                      width: 20px;
                      height: 20px;
                    
                      border: 2px solid #ddd;
                      border-radius: 4px;
                    }
                    
                    .radio-checked.ios::part(container) {
                      border-color: royalblue;
                    }
                    /**
                     * Custom properties (sometimes referred to as CSS variables or cascading variables)
                     * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                     * They are set using custom property notation, e.g.: --main-color: black;
                     * and are accessed using the var() function, e.g.: color: var(--main-color);
                     * You can find below your component''s properties you can customize within the page.
                     * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                     * For more informations see https://ionicframework.com/docs/theming.
                    **/
                    //--ion-grid-column-padding	//Padding for the Column
                    //--ion-grid-column-padding-lg	//Padding for the Column on lg screens and up
                    //--ion-grid-column-padding-md	//Padding for the Column on md screens and up
                    //--ion-grid-column-padding-sm	//Padding for the Column on sm screens and up
                    //--ion-grid-column-padding-xl	//Padding for the Column on xl screens and up
                    //--ion-grid-column-padding-xs	//Padding for the Column on xs screens and up
                    //--ion-grid-columns	//The number of total Columns in the Grid
                    '
↓dateStart [ngx.components.UICompVariable-1701369372611]: 
  autoEmit: true
↓dateEnd [ngx.components.UICompVariable-1701369391678]: 
  autoEmit: true
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1701426962909]: 
  ↓CallSequence [ngx.components.UIDynamicAction-1701426971964]: 
    beanData: |
      '{
       "ionBean": "CallSequenceAction",
       "requestable": "plain:C8OBilling.GetBillingCustomers",
       "noLoading": "plain:true"
      }'
    tagName: CallSequence
↓customerName [ngx.components.UICompVariable-1701427856934]: 